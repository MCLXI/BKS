#!/sbin/runscript

# backward compatibility for existing gentoo layout 
#
if [ -d "/var/lib/HTS/.HTS" ]; then
	HTSD_DEFAULT_DATADIR="/var/lib/HTS/.HTS"
else
	HTSD_DEFAULT_DATADIR="/var/lib/HTSd"
fi

HTSD_CONFIGFILE=${HTSD_CONFIGFILE:-/etc/HTS/HTS.conf}
HTSD_PIDDIR=${HTSD_PIDDIR:-/var/run/HTSd}
HTSD_PIDFILE=${HTSD_PIDFILE:-${HTSD_PIDDIR}/HTSd.pid}
HTSD_DATADIR=${HTSD_DATADIR:-${HTSD_DEFAULT_DATADIR}}
HTSD_USER=${HTSD_USER:-${HTS_USER:-HTS}}
HTSD_GROUP=${HTSD_GROUP:-HTS}
HTSD_BIN=${HTSD_BIN:-/usr/bin/HTSd}
HTSD_NICE=${HTSD_NICE:-${NICELEVEL:-0}}
HTSD_OPTS="${HTSD_OPTS:-${HTS_OPTS}}"

name="HTS Core Daemon"
description="HTS cryptocurrency P2P network daemon"

command="/usr/bin/HTSd"
command_args="-pid=\"${HTSD_PIDFILE}\" \
		-conf=\"${HTSD_CONFIGFILE}\" \
		-datadir=\"${HTSD_DATADIR}\" \
		-daemon \
		${HTSD_OPTS}"

required_files="${HTSD_CONFIGFILE}"
start_stop_daemon_args="-u ${HTSD_USER} \
			-N ${HTSD_NICE} -w 2000"
pidfile="${HTSD_PIDFILE}"

# The retry schedule to use when stopping the daemon. Could be either
# a timeout in seconds or multiple signal/timeout pairs (like
# "SIGKILL/180 SIGTERM/300")
retry="${HTSD_SIGTERM_TIMEOUT}"

depend() {
	need localmount net
}

# verify
# 1) that the datadir exists and is writable (or create it)
# 2) that a directory for the pid exists and is writable
# 3) ownership and permissions on the config file
start_pre() {
	checkpath \
	-d \
	--mode 0750 \
	--owner "${HTSD_USER}:${HTSD_GROUP}" \
	"${HTSD_DATADIR}"

	checkpath \
	-d \
	--mode 0755 \
	--owner "${HTSD_USER}:${HTSD_GROUP}" \
	"${HTSD_PIDDIR}"

	checkpath -f \
	-o ${HTSD_USER}:${HTSD_GROUP} \
	-m 0660 \
	${HTSD_CONFIGFILE}

	checkconfig || return 1
}

checkconfig()
{
	if ! grep -qs '^rpcpassword=' "${HTSD_CONFIGFILE}" ; then
		eerror ""
		eerror "ERROR: You must set a secure rpcpassword to run HTSd."
		eerror "The setting must appear in ${HTSD_CONFIGFILE}"
		eerror ""
		eerror "This password is security critical to securing wallets "
		eerror "and must not be the same as the rpcuser setting."
		eerror "You can generate a suitable random password using the following"
		eerror "command from the shell:"
		eerror ""
		eerror "bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'"
		eerror ""
		eerror "It is also recommended that you also set alertnotify so you are "
		eerror "notified of problems:"
		eerror ""
		eerror "ie: alertnotify=echo %%s | mail -s \"HTS Alert\"" \
			"admin@foo.com"
		eerror ""
		return 1
	fi
}
